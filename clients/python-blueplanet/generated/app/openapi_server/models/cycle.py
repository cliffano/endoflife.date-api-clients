# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from openapi_server import util


class Cycle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cycle: object=None, release_date: object=None, eol: object=None, latest: object=None, link: object=None, lts: object=None, support: object=None, discontinued: object=None):  # noqa: E501
        """Cycle - a model defined in Swagger

        :param cycle: The cycle of this Cycle.  # noqa: E501
        :type cycle: object
        :param release_date: The release_date of this Cycle.  # noqa: E501
        :type release_date: object
        :param eol: The eol of this Cycle.  # noqa: E501
        :type eol: object
        :param latest: The latest of this Cycle.  # noqa: E501
        :type latest: object
        :param link: The link of this Cycle.  # noqa: E501
        :type link: object
        :param lts: The lts of this Cycle.  # noqa: E501
        :type lts: object
        :param support: The support of this Cycle.  # noqa: E501
        :type support: object
        :param discontinued: The discontinued of this Cycle.  # noqa: E501
        :type discontinued: object
        """
        self.swagger_types = {
            'cycle': object,
            'release_date': object,
            'eol': object,
            'latest': object,
            'link': object,
            'lts': object,
            'support': object,
            'discontinued': object
        }

        self.attribute_map = {
            'cycle': 'cycle',
            'release_date': 'releaseDate',
            'eol': 'eol',
            'latest': 'latest',
            'link': 'link',
            'lts': 'lts',
            'support': 'support',
            'discontinued': 'discontinued'
        }

        self._cycle = cycle
        self._release_date = release_date
        self._eol = eol
        self._latest = latest
        self._link = link
        self._lts = lts
        self._support = support
        self._discontinued = discontinued

    @classmethod
    def from_dict(cls, dikt) -> 'Cycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The cycle of this Cycle.  # noqa: E501
        :rtype: Cycle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cycle(self) -> object:
        """Gets the cycle of this Cycle.

        Release Cycle  # noqa: E501

        :return: The cycle of this Cycle.
        :rtype: object
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle: object):
        """Sets the cycle of this Cycle.

        Release Cycle  # noqa: E501

        :param cycle: The cycle of this Cycle.
        :type cycle: object
        """

        self._cycle = cycle

    @property
    def release_date(self) -> object:
        """Gets the release_date of this Cycle.

        Release Date for the first release in this cycle  # noqa: E501

        :return: The release_date of this Cycle.
        :rtype: object
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date: object):
        """Sets the release_date of this Cycle.

        Release Date for the first release in this cycle  # noqa: E501

        :param release_date: The release_date of this Cycle.
        :type release_date: object
        """
        if release_date is not None and len(release_date) > 10:
            raise ValueError("Invalid value for `release_date`, length must be less than or equal to `10`")  # noqa: E501
        if release_date is not None and len(release_date) < 10:
            raise ValueError("Invalid value for `release_date`, length must be greater than or equal to `10`")  # noqa: E501

        self._release_date = release_date

    @property
    def eol(self) -> object:
        """Gets the eol of this Cycle.

        End of Life Date for this release cycle  # noqa: E501

        :return: The eol of this Cycle.
        :rtype: object
        """
        return self._eol

    @eol.setter
    def eol(self, eol: object):
        """Sets the eol of this Cycle.

        End of Life Date for this release cycle  # noqa: E501

        :param eol: The eol of this Cycle.
        :type eol: object
        """
        if eol is not None and len(eol) < 1:
            raise ValueError("Invalid value for `eol`, length must be greater than or equal to `1`")  # noqa: E501

        self._eol = eol

    @property
    def latest(self) -> object:
        """Gets the latest of this Cycle.

        Latest release in this cycle  # noqa: E501

        :return: The latest of this Cycle.
        :rtype: object
        """
        return self._latest

    @latest.setter
    def latest(self, latest: object):
        """Sets the latest of this Cycle.

        Latest release in this cycle  # noqa: E501

        :param latest: The latest of this Cycle.
        :type latest: object
        """
        if latest is not None and len(latest) < 1:
            raise ValueError("Invalid value for `latest`, length must be greater than or equal to `1`")  # noqa: E501

        self._latest = latest

    @property
    def link(self) -> object:
        """Gets the link of this Cycle.

        Link to changelog for the latest release, if available  # noqa: E501

        :return: The link of this Cycle.
        :rtype: object
        """
        return self._link

    @link.setter
    def link(self, link: object):
        """Sets the link of this Cycle.

        Link to changelog for the latest release, if available  # noqa: E501

        :param link: The link of this Cycle.
        :type link: object
        """
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")  # noqa: E501

        self._link = link

    @property
    def lts(self) -> object:
        """Gets the lts of this Cycle.

        Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.   # noqa: E501

        :return: The lts of this Cycle.
        :rtype: object
        """
        return self._lts

    @lts.setter
    def lts(self, lts: object):
        """Sets the lts of this Cycle.

        Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.   # noqa: E501

        :param lts: The lts of this Cycle.
        :type lts: object
        """

        self._lts = lts

    @property
    def support(self) -> object:
        """Gets the support of this Cycle.

        Whether this release cycle has active support  # noqa: E501

        :return: The support of this Cycle.
        :rtype: object
        """
        return self._support

    @support.setter
    def support(self, support: object):
        """Sets the support of this Cycle.

        Whether this release cycle has active support  # noqa: E501

        :param support: The support of this Cycle.
        :type support: object
        """
        if support is not None and len(support) > 10:
            raise ValueError("Invalid value for `support`, length must be less than or equal to `10`")  # noqa: E501
        if support is not None and len(support) < 10:
            raise ValueError("Invalid value for `support`, length must be greater than or equal to `10`")  # noqa: E501

        self._support = support

    @property
    def discontinued(self) -> object:
        """Gets the discontinued of this Cycle.

        Whether this cycle is now discontinued.  # noqa: E501

        :return: The discontinued of this Cycle.
        :rtype: object
        """
        return self._discontinued

    @discontinued.setter
    def discontinued(self, discontinued: object):
        """Sets the discontinued of this Cycle.

        Whether this cycle is now discontinued.  # noqa: E501

        :param discontinued: The discontinued of this Cycle.
        :type discontinued: object
        """
        if discontinued is not None and len(discontinued) > 10:
            raise ValueError("Invalid value for `discontinued`, length must be less than or equal to `10`")  # noqa: E501
        if discontinued is not None and len(discontinued) < 10:
            raise ValueError("Invalid value for `discontinued`, length must be greater than or equal to `10`")  # noqa: E501

        self._discontinued = discontinued

//
// Cycle.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details of a single release cycle of a given product. There might be some slight variations to this depending on the product. */
public struct Cycle: Codable, JSONEncodable, Hashable {

    /** Release Cycle */
    public var cycle: AnyCodable?
    /** Release Date for the first release in this cycle */
    public var releaseDate: AnyCodable?
    /** End of Life Date for this release cycle */
    public var eol: AnyCodable?
    /** Latest release in this cycle */
    public var latest: AnyCodable?
    /** Link to changelog for the latest release, if available */
    public var link: AnyCodable?
    /** Whether this release cycle has long-term-support (LTS). Can be a date instead in YYYY-MM-DD format as well if the release enters LTS status on a given date.  */
    public var lts: AnyCodable?
    /** Whether this release cycle has active support */
    public var support: AnyCodable?
    /** Whether this cycle is now discontinued. */
    public var discontinued: AnyCodable?

    public init(cycle: AnyCodable? = nil, releaseDate: AnyCodable? = nil, eol: AnyCodable? = nil, latest: AnyCodable? = nil, link: AnyCodable? = nil, lts: AnyCodable? = nil, support: AnyCodable? = nil, discontinued: AnyCodable? = nil) {
        self.cycle = cycle
        self.releaseDate = releaseDate
        self.eol = eol
        self.latest = latest
        self.link = link
        self.lts = lts
        self.support = support
        self.discontinued = discontinued
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cycle
        case releaseDate
        case eol
        case latest
        case link
        case lts
        case support
        case discontinued
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cycle, forKey: .cycle)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encodeIfPresent(eol, forKey: .eol)
        try container.encodeIfPresent(latest, forKey: .latest)
        try container.encodeIfPresent(link, forKey: .link)
        try container.encodeIfPresent(lts, forKey: .lts)
        try container.encodeIfPresent(support, forKey: .support)
        try container.encodeIfPresent(discontinued, forKey: .discontinued)
    }
}

